name: Destroy AWS Infrastructure

on:
  workflow_dispatch: # Ermöglicht manuelles Auslösen

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
  TF_STATE_DYNAMODB_TABLE: ${{ secrets.TF_STATE_DYNAMODB_TABLE }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_ssh_public_key_content: ${{ secrets.SSH_PUBLIC_KEY }} # Muss hier sein, auch wenn nicht direkt genutzt,
                                                             # damit Terraform die Konfiguration validieren kann
                                                             # vor dem Destroy, falls Provider das erfordern.
  TF_VAR_aws_region: ${{ secrets.AWS_REGION }}


jobs:
  infra_destroy:
    name: Destroy AWS Infrastructure with Terraform
    runs-on: ubuntu-latest
    env: # Umgebungsvariablen spezifisch für diesen Job
      # AWS Credentials werden von der Action aws-actions/configure-aws-credentials gesetzt
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init for Destroy
        working-directory: ./terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=react-app/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_STATE_DYNAMODB_TABLE }}" \
            -reconfigure

      - name: Terraform Destroy
        working-directory: ./terraform
        run: terraform destroy -auto-approve -input=false -var="ec2_user=${{ secrets.EC2_USER }}"